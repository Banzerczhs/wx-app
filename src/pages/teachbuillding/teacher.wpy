<style scoped>
.indexes {
  position: relative;
}

.indexes-title{
  color:#fff;
  font-size: 36rpx;
  background-color:rgba(0,0,0,0.3);
}

.indexBar {
  position: fixed;
  top:50%;
  right: 0px;
  transform:translateY(-40%);
  -webkit-transform:translateY(-40%);
  padding: 20rpx 20rpx 20rpx 60rpx;
  display: flex;
  align-items: center;
}

.indexBar .indexBar-box {
  width: 40rpx;
  height: auto;
  background-color: rgba(255,255,255,0.3);
  display: flex;
  flex-direction: column;
  box-shadow: 0 0 20rpx rgba(0, 0, 0, 0.1);
  border-radius: 10rpx;
}

.indexBar-item {
  flex: 1;
  width: 40rpx;
  height: 40rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24rpx;
  color: #fff;
}

.indexToast {
  position: fixed;
  top: 0;
  right: 80rpx;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  width: 100rpx;
  height: 100rpx;
  border-radius: 10rpx;
  margin: auto;
  color: #fff;
  line-height: 100rpx;
  text-align: center;
  font-size: 48rpx;
}
/* 自己添加 */
.resultList{
  transform:scale(0);
  -webkit-transform:scale(0);
  transition:transform .3s;
  -webkit-transition:transform .3s;
  transform-origin:center center;
  -webkit-transform-origin:center center;
  background: url('https://www.quyun.online/assets/image/bg1.jpg') no-repeat 0 0;
  background-size:cover;
  z-index:99;
}

.resultList.active{
  transform:scale(1);
  -webkit-transform:scale(1);
}
</style>

<template>
  <block>
    <custom-nav isBack="{{true}}" bgColor="text-custom-white">
      <view slot="backText">教师办公室</view>
    </custom-nav>
    <view class="scroll" style="top:{{CustomBar}}px;">
      <!-- 搜索 -->
      <view @tap="showlist">
        <cu-search 
          :twoWayValue="inputText"
          :twoWayValue.sync="inputText"
          styles="cu-bar search text-white" 
          searchType="radius"
          bgColor="background-color:rgba(255,255,255,0.3);"
          tipcss="color:#fff;"
          inputcss="color:#fff;">
          <text class="cuIcon-search text-white" slot="icon"></text>
          <view class="action" slot="btn" @tap.stop="closelist" style="display:{{state?'block':'none'}};">
            <text class="cuIcon-close"></text>
            <text>取消</text>
          </view>
        </cu-search>
      </view>
      <!-- 展示 -->
      <scroll-view scroll-y class="indexes" scroll-into-view="indexes-{{listCurID}}" style="height:calc(100vh - 50px);" scroll-with-animation="true" enable-back-to-top="true">
        <repeat for="{{list}}" key="index">
          <block>
            <view class="padding indexes-title" id="indexes-{{index+1}}" data-index="{{index+1}}">{{list[index]}}<text style="font-size:28rpx;margin-left:10rpx;">({{datateacher[list[index]][0].subtitle}})</text></view>
            <view class="cu-list menu-avatar no-padding">
              <my-list :datalist.sync="datateacher[list[index]]"></my-list>
            </view>
          </block>
        </repeat>
      </scroll-view>
      <!-- 纵条 -->
      <view class="indexBar">
        <view class="indexBar-box" @touchstart="tStart" @touchend="tEnd" @touchmove.stop="tMove">
          <repeat for="{{list}}" key="index">
            <view class="indexBar-item" id="{{list[index]}}" @touchstart="getCur" @touchend="setCur">{{index+1}}</view>
          </repeat>
        </view>
      </view>
      <!--选择显示-->
      <view hidden="{{hidden}}" class="indexToast">
        {{listCur}}
      </view>
    </view>
    <scroll-view 
      scroll-y
      class="scroll resultList {{listState?'active':''}}"
      style="top:{{toTop}}px;display:{{state?'block':'none'}};background-position:0 -{{toTop}}px;">
      <view class="cu-list menu-avatar no-padding">
        <result-list :datalist.sync="result"></result-list>
      </view>
    </scroll-view>
  </block>
</template>

<script>
import wepy from "wepy";
import datateacher from "@/structure/teachbuillding/teacher.js"
import Customnav from "@/components/customnav";
import Search from "@/components/search";
import Teacherlist from "@/components/teachbuillding/teacherlist";

export default  class Teacher extends wepy.page {
  config = {
    navigationBarTitleText: '办公室信息'
  }

  data = {
    CustomBar: '',
    hidden: true,
    list : [],
    listCur : '',
    listCurID : 0,
    datateacher:datateacher.teacher,
    toTop : 0,
    inputText : '',
    state : false,
    listState : false
  }

  components = {
    'custom-nav' : Customnav,
    'cu-search' : Search,
    'my-list' : Teacherlist,
    'result-list' : Teacherlist
  }

  onLoad() {
    this.list=[...Object.keys(this.datateacher)];
    this.listCur='1F';
    let res=wepy.getSystemInfoSync();
    let custom=wepy.getMenuButtonBoundingClientRect();
    this.CustomBar=custom.bottom+custom.top-res.statusBarHeight;
    this.$apply();
  }

  onReady() {
    let that = this;
    wx.createSelectorQuery().select('.indexBar-box').boundingClientRect(function(res) {
      that.boxTop=res.top;
      that.$apply();
    }).exec();
    wx.createSelectorQuery().select('.search').boundingClientRect(function(res) {
      that.toTop=that.CustomBar+res.height;
      that.$apply();
    }).exec();
  }

  //获取文字信息
  methods={
    getCur(e) {
      this.hidden=false;
      this.listCur=e.target.id;
    },

    setCur(e){
      this.hidden=true;
      this.listCur=this.listCur;
    },
    //滑动选择Item
    tMove(e) {
      let y = e.touches[0].clientY,
        offsetTop = this.boxTop,
        that = this;
      //判断选择区域,只有在选择区才会生效
      if (y > offsetTop) {
        let num = parseInt((y - offsetTop) / 23);
        num=num>=5?5:num;
        this.listCur=that.list[num];  //最多到字母z，所以选择只需要判断大于即可
      }
    },
    //触发全部开始选择
    tStart() {
      this.hidden= false
    },

    //触发结束选择
    tEnd() {
      this.hidden=true;
      this.listCurID=parseInt(this.listCur);
    },

    showlist(){
      this.state=true;
      this.$nextTick().then(()=>{
        this.listState=true;
        this.$apply();
      })
    },

    closelist(){
      this.listState=false;
      this.$nextTick().then(()=>{
        this.state=false;
        this.inputText='';
        this.$apply();
      })
    }
  }

  computed = {
    result(){
      let {inputText,datateacher}=this;
      let resultArr=[];
      Object.keys(datateacher).forEach(itemArr=>{
        resultArr.push(...datateacher[itemArr].filter(item=>{
          let res=false;
          if(item&&inputText){
            res=item.name.includes(inputText)||
              item.url.includes(inputText)||
              item.subtitle.includes(inputText);
          }
          return res;
        }));
      });
      return resultArr;
    }
  }
}
</script>
